=Compiling the kernel, installing kernel modules and making a JFFS2 rootfs for the FriendlyArm=

==Download toolchain, u-boot and kernel==

Go to:
   http://code.google.com/p/mini2440/downloads/list and download:

   {{{mini2440-bootstrap-v2.sh}}}

Study this script and then run

   {{{mini2440-filedownload.sh}}}

This script will get you the toolchain, the latest kernel, u-boot, compile u-boot and set-up the required directories.  Note: there are some issues with u-boot, please see other posts on resolving this issue.  I just use an old version u-boot.bin as I am running a 64M dev board. 

==Place in .profile on your Linux host==

 * export PATH=/home/user/mini2440-bootstrap/arm-2008q3/bin:$PATH

 * CROSS_COMPILE=arm-none-linux-gnueabi-
 * CC=”${CROSS_COMPILE}gcc –march=armv4t –mtune=arm920t”
 * export CROSS_COMPILE
 * export CC

Depending on permission’s *sudo* may be required on some commands.

==Compile the kernel==
(cd to mini2440-bootstrap)

{{{
[mini2440-bootstrap] # cd kernel/mini2440
[mini2440] # make ARCH=arm O=../../kernel-bin/ mrproper
[mini2440] # make ARCH=arm O=../../kernel-bin/
}}}
             mini2440_defconfig (only do this once or you
             over-write any changes you make later)

{{{
[mini2440] # make ARCH=arm O=../../kernel-bin/ menuconfig
}}}
   subsequent invocations should bring in your previous configuration file or you can <Load an alternative configuration file.>

   Only do a mrproper when you want to start from scratch again.

   * configure the kernel to support the wanted file systems and MTD
   * select built-in and loadable kernel modules
   * save your .config as something unique, just in case. 

{{{
[mini2440] # make ARCH=arm O=../../kernel-bin/ -j4
[mini2440] # make ARCH=arm O=../../kernel-bin/ -j4 modules
}}}

   backup configuration files if you want to do the following:

{{{
[mini2440] # make ARCH=arm distclean
}}}

   install the kernel modules

{{{
[mini2440] # sudo make ARCH=arm O=../../kernel-bin/INSTALL_MOD_PATH=/home/user/mini2440-bootstrap/target/ modules_install
}}}

   strip debug info, if you are worried about the size

{{{
# cd /home/user/mini2440-bootstrap/target/lib/modules

[modules] # /home/user/mini240-bootstrap/2008-q3/arm-none-linux-gnueabi/bin/strip `find . –name “*.ko”`
}}}

   (note: two back ticks)

==Change target directory file permission’s==

{{{
[mini2440-bootstrap] # sudo chown -R 0:0 /home/user/mini2440-bootstrap/target
}}}

Makes all files in {{{[target]}}}owned by root.

==Make the uImage==

{{{
[mini2440-bootstrap] # sudo ./uboot/mini2440/tools/mkimage –A arm –O linux -T kernel -C none –a 0x30008000 –e 0x30008000 -d kernel-bin/arch/arm/boot/zImage output/uImage
}}}


==Compile BusyBox==

I started by compiling BusyBox as static.  When things are working properly you may want to re-compile as dynamic.

{{{
[busybox-1.13.3] # make defconfig
[busybox-1.13.3] # make ARCH=arm menuconfig
[busybox-1.13.3] # make clean
[busybox-1.13.3] # make ARCH=arm
[busybox-1.13.3] # make ARCH=arm CONFIG_PREFIX=/home/user/mini2440-bootstrap/target install 
}}}

==Configure the New Target Root File System==

Following the tutorial:
http://wiki.davincidsp.com/index.php/Creating_a_Root_File_System_for_Linux_on_OMAP35x

check that the following are in {{{[target]}}}:

{{{
[target] # ls -la
}}}

   bin, linuxrc-> bin/busybox, sbin and usr

Create the following directories:

{{{
[target] # mkdir –p dev
[target] # mkdir –p etc
[target] # mkdir –p lib
[target] # mkdir –p mnt
[target] # mkdir –p opt
[target] # mkdir –p proc
[target] # mkdir –p sys
[target] # mkdir –p tmp
[target] # mkdir –p var
[target] # mkdir –p var/log
[target] # mknod dev/null c 2 2  (chmod 777)
[target] # mknod dev/console c 5 1 (chmod 600)
}}}

I suspect that the two mknod entries are not required as mdev.conf (in the following example) seems to either create these or over-write them.

Use the /etc directory from this example rootfs (rootfsjffs2.gz).

http://blog.leshak.ru/english/pages/how-to-install-u-boot-linux-2629-rootfsjffs2-busybox-1132-into-nand-qq2440/

Note: /etc gets mounted into ram so don’t expect any changes you make to files in /etc to survive a re-boot!  

==Add the Shared Libraries Applications will Require==

{{{
[mini2440-bootstrap] # cd /target/lib
[lib] # cp –r /home/user/mini2440-bootstrap/arm-2008q3/arm-none-linux-gnueabi/libc/lib/* .
[lib] # /home/user/mini2440-bootstrap/arm-2008q3/arm-none-linux-gnueabi/bin/strip `find . –name “*.ko”`
}}}

(note: two back ticks)  This last step didn’t work for me, so one ends up with a bigger image.

==Creating a JFFS2 Root File System==
